#version 450

#include "Common.glsl"

layout(std430, binding = 0) readonly buffer Input
{
	uint g_input[];
};

layout(std430, binding = 1) buffer Output
{
	uint g_output[];
};

layout(push_constant) uniform PushConstants
{
	uint inputCount;
} pushConstants;

shared uint sharedCounter;

layout(local_size_x = 1024, local_size_y = 1) in;
void main()
{
	atomicAnd(sharedCounter, 0);

	groupMemoryBarrierWithGroupSync();

	uint chunkCount = gl_WorkGroupSize.x;
	uint chunkSize = (pushConstants.inputCount + chunkCount - 1) / chunkCount;

	uint localCounter = 0;

	uint first = gl_LocalInvocationID.x * chunkSize;
	uint last = min(first+chunkSize, pushConstants.inputCount);
	for (uint i=first; i < last; ++i)
	{
		localCounter += g_input[i];
	}

	atomicAdd(sharedCounter, localCounter);

	groupMemoryBarrierWithGroupSync();

	if (gl_LocalInvocationID.x == 0)
	{
		g_output[0] = sharedCounter;
	}
}
